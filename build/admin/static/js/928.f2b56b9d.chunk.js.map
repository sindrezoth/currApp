{"version":3,"file":"static/js/928.f2b56b9d.chunk.js","mappings":"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","sources":["apps/admin/dashboard/DashAdminsList.js","apps/admin/dashboard/ClientItemList.js","features/admins/clientsApiSlice.js","apps/admin/dashboard/DashClientsList.js","apps/admin/dashboard/Dashboard.js","apps/admin/AdminHome.js","apps/admin/AdminAppLayout.js","apps/admin/dashboard/ClientsListPage.js","apps/admin/dashboard/ClientAccount.js","apps/admin/dashboard/AdminsListPage.js","apps/admin/dashboard/AdminAccount.js","apps/admin/AdminApp.js"],"sourcesContent":["const DashAdminsList = () => {\n  return (\n  <div className=\"adminsListWrapper usersList\">\n    <h3>Список админов</h3>\n    <ul>\n    </ul>\n  </div>\n  );\n}\n\nexport default DashAdminsList;\n","import { Link } from 'react-router-dom';\n\nconst ClientItemList = ({ client }) => {\n  const clientKeys = Object.keys(client).filter(key => !key.match(/_/g));\n//console.log(Object.keys(client).filter(key => !key.match(/_/g)));\n\n  return (\n    <>\n      {\n      <li>\n        <Link to={\"/clients/\" + client.id}>\n            <div className=\"container border\">\n              <div className=\"row\">\n                <div className=\"col-lg-4 col-md-6 border\">\n                  {(client?.firstname || client?.lastname) ? \n                    <p>{client.firstname} {client.lastname}</p> :\n                    <p>{client.email}</p>\n                  }\n                </div>\n                <div className=\"col-lg-3 col-md-6 border\">\n                  <p className=\"\">депозит</p>\n                </div>\n                <div className='col-lg-3 col-md-12 border'>\n                  {client?.createdAt && \n                    <div className=\"border\">{new Date(client.createdAt).toLocaleDateString(\"ru-RU\")}</div>}\n                </div>\n                <div className={`col-lg-2 ${true ? \"bg-danger\" : \"bg-success\"}`}>\n                      \n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-lg-7 border\">\n                  <p>KOSH</p>\n                </div>\n                <div className='col-lg-3 col-md-12 border'>\n                  {client?.updatedAt && \n                    <div className=\"border\">{new Date(client.createdAt).toLocaleDateString(\"ru-RU\")}</div>}\n                </div>\n              </div>\n            </div>\n\n        </Link>\n      </li>\n\n      }\n    </>\n  );\n}\n\nexport default ClientItemList;\n","import {\n  createSelector,\n  createEntityAdapter\n} from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst clientsAdapter = createEntityAdapter({})\n\nconst initialState = clientsAdapter.getInitialState()\n\nexport const clientsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getClients: builder.query({\n      query: () => ({\n        url: '/clients',\n        validateStatus: (response, result) => {\n          return response.status === 200 && !result.isError\n        },\n      }),\n      transformResponse: responseData => {\n        const loadedClients = responseData.map(client => {\n          client.id = client._id\n          return client\n        });\n        return clientsAdapter.setAll(initialState, loadedClients)\n      },\n      providesTags: (result, error, arg) => {\n        if (result?.ids) {\n          return [\n            { type: 'Client', id: 'LIST' },\n            ...result.ids.map(id => ({ type: 'Client', id }))\n          ]\n        } else return [{ type: 'Client', id: 'LIST' }]\n      }\n    }),\n    registerClient: builder.mutation({\n      query: initialClientData => ({\n        url: '/register',\n        method: 'POST',\n        body: {\n          ...initialClientData,\n        }\n      }),\n      invalidatesTags: [\n        { type: 'Client', id: \"LIST\" }\n      ]\n    }),\n    addNewClient: builder.mutation({\n      query: initialClientData => ({\n        url: '/clients',\n        method: 'POST',\n        body: {\n          ...initialClientData,\n        }\n      }),\n      invalidatesTags: [\n        { type: 'Client', id: \"LIST\" }\n      ]\n    }),\n    updateClient: builder.mutation({\n      query: initialClientData => ({\n        url: '/clients',\n        method: 'PATCH',\n        body: {\n          ...initialClientData,\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [\n        { type: 'Client', id: arg.id }\n      ]\n    }),\n    deleteClient: builder.mutation({\n      query: ({ id }) => ({\n        url: `/clients`,\n        method: 'DELETE',\n        body: { id }\n      }),\n      invalidatesTags: (result, error, arg) => [\n        { type: 'Client', id: arg.id }\n      ]\n    }),\n  }),\n})\n\nexport const {\n  useGetClientsQuery,\n  useRegisterClientMutation,\n  useAddNewClientMutation,\n  useUpdateClientMutation,\n  useDeleteClientMutation,\n} = clientsApiSlice;\n\n// returns the query result object\nexport const selectClientsResult = clientsApiSlice.endpoints.getClients.select();\n\n// creates memoized selector\nconst selectClientsData = createSelector(\n  selectClientsResult,\n  clientsResult => clientsResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllClients,\n  selectById: selectClientById,\n  selectIds: selectClientIds\n  // Pass in a selector that returns the clients slice of state\n} = clientsAdapter.getSelectors(state => selectClientsData(state) ?? initialState);\n","import { useState, useEffect } from 'react';\nimport ClientItemList from './ClientItemList.js';\nimport { useGetClientsQuery, selectAllClients } from '../../../features/admins/clientsApiSlice.js';\n\nconst DashClientsList = () => {\n  const {data: clients, isLoading, isError, isFetching, isSuccess}= useGetClientsQuery('clientsList', {\n        pollingInterval: 60000,\n        refetchOnFocus: true,\n        refetchOnMountOrArgChange: true\n    });\n\n\n  console.log(\n    'load ' + isLoading,\n    'err ' + isError,\n    'succ ' + isSuccess,\n  )\n\n  console.log(clients);\n  return (\n    <div className=\"clietnsListWrapper usersList\">\n      <h3>Список клиентов</h3>\n      <ul>\n      {\n        (!isLoading && isSuccess) && \n        clients.ids.map((id) => {\n          console.log('')\n              return <><ClientItemList key={id} client={{...clients.entities[id]}}/><hr/></>\n            }\n            )\n      }\n      </ul>\n    </div>\n  );\n}\n\nexport default DashClientsList;\n","import DashAdminsList from './DashAdminsList.js';\nimport DashClientsList from './DashClientsList.js';\n\nconst Dashboard = () => {\n  return (\n  <>\n    <h2>Dashboard</h2>\n    <div className=\"dashboardWrapper\">\n      <DashClientsList />\n      <DashAdminsList />\n    </div>\n  </>\n  );\n}\n\nexport default Dashboard;\n","import { useEffect } from 'react';\nimport { useNavigate, Link, useLocation } from 'react-router-dom';\nimport useAuth from '../../hooks/useAuth.js';\n\nimport Dashboard from './dashboard/Dashboard.js';\n\nconst AdminHome = () => {\n  const { username } = useAuth();\n\n  return (\n    <main>\n      <Dashboard />\n    </main>\n  );\n}\n\nexport default AdminHome;\n\n\n","import { Outlet } from 'react-router-dom';\nimport Header from '../../components/Header.js';\nimport Footer from '../../components/Footer.js';\n\nconst AdminAppLayout = () => {\n  return (\n    <>\n      <Header />\n      <div>\n        <Outlet />\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport default AdminAppLayout;\n","const ClientsListPage = () => {\n  return (\n    <div>ClientsListPage</div>\n  );\n}\n\nexport default ClientsListPage;\n","import { useParams, Link } from 'react-router-dom';\n\n\nconst ClientAccount = (props) => {\n  const { id } = useParams();\n\n  return (\n  <>\n    <div>ClientAccount</div>\n    <p>id: {id}</p>\n\n    <Link to=\"/clients\">Назад к списку клентов</Link>\n  </>\n  );\n}\n\nexport default ClientAccount;\n\n","const AdminsListPage = () => {\n  return (\n    <div>AdminsListPage</div>\n  );\n}\n\nexport default AdminsListPage;\n","const AdminAccount = () => {\n  return (\n    <div>AdminAccount</div>\n  );\n}\n\nexport default AdminAccount;\n\n","import { Routes, Route, Navigate, Link } from 'react-router-dom';\n\nimport AdminHome from './AdminHome';\nimport AdminAppLayout from './AdminAppLayout.js';\nimport ClientsListPage from './dashboard/ClientsListPage.js';\nimport ClientAccount from './dashboard/ClientAccount.js';\nimport AdminsListPage from './dashboard/AdminsListPage.js';\nimport AdminAccount from './dashboard/AdminAccount.js';\n\n//import RegisterForm from '../../features/auth/RegisterForm.js';\nimport Layout from '../../components/Layout';\n\nconst AdminApp = () => {\n  console.log('adminapp')\n  return (\n    <Routes>\n      <Route path=\"/*\" element={<AdminAppLayout />}>\n        <Route index element={<Link to=\"/home\">Home</Link>} />\n        <Route path=\"home\" element={<AdminHome />} />\n        <Route path=\"clients\" element={<ClientsListPage />} />\n        <Route path=\"clients/:id\" element={<ClientAccount />} />\n        <Route path=\"admins\" element={<AdminsListPage />} />\n        <Route path=\"admins/:username\" element={<AdminAccount />} />\n        <Route path=\"*\" element={<Navigate to=\"/home\" replace />} />\n      </Route>\n    </Routes>\n  );\n};\n\nexport default AdminApp;\n\n"],"names":["DashAdminsList","_jsxs","className","children","_jsx","_ref","client","Object","keys","filter","key","match","_Fragment","Link","to","id","firstname","lastname","email","createdAt","Date","toLocaleDateString","updatedAt","clientsAdapter","createEntityAdapter","initialState","getInitialState","clientsApiSlice","apiSlice","injectEndpoints","endpoints","builder","getClients","query","url","validateStatus","response","result","status","isError","transformResponse","responseData","loadedClients","map","_id","setAll","providesTags","error","arg","ids","type","registerClient","mutation","initialClientData","method","body","invalidatesTags","addNewClient","updateClient","deleteClient","useGetClientsQuery","useRegisterClientMutation","useAddNewClientMutation","useUpdateClientMutation","useDeleteClientMutation","selectClientsResult","select","selectClientsData","createSelector","clientsResult","data","selectAll","selectAllClients","selectById","selectClientById","selectIds","selectClientIds","getSelectors","state","_selectClientsData","DashClientsList","clients","isLoading","isFetching","isSuccess","pollingInterval","refetchOnFocus","refetchOnMountOrArgChange","console","log","ClientItemList","entities","Dashboard","AdminHome","username","useAuth","AdminAppLayout","Header","Outlet","Footer","ClientsListPage","props","useParams","AdminsListPage","AdminAccount","AdminApp","Routes","Route","path","element","index","ClientAccount","Navigate","replace"],"sourceRoot":""}